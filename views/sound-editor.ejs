<%- include('shared/head'); -%>
<%- include('shared/header'); -%>
  <div id="menu-bar">
    <!--TODO Implement [File, Edit, View, Settings, Help]-->
    <div id="project-settings">
      <span id="project-title"></span>
    </div>
    <button id="tl-add-layer">Add Layer</button>
    <button id="tl-play">Play</button>
    <button id="tl-stop">Stop</button>

    <form id="search-bar">
      <input type="text" placeholder="Search Sounds">
      <button type="submit"></i></button>
    </form>

  </div>
  <main>
    <section>

      <h2>Sounds</h2>
      <div id="sound-list">
        <span class="error-msg"></span>
      </div>

    </section>

    <div id="timeline">
      <div id="tl-cursor"></div>
      <div id="layers"></div>
    </div>
  </main>
  <script type="text/javascript" src="/sound-elements.js"></script>
  <script>

const soundList = document.getElementById('sound-list')
const search = document.getElementById('search-bar')

const timeline = document.getElementById('timeline')

const pxToEm = function (px) {
  return px / 16
}
const resetCursor = function () {
  const layerWidth = Number.parseInt(document.getElementsByClassName('tl-layer')[0].offsetWidth)
  const cursor = document.getElementById('tl-cursor')
  cursor.style.minHeight = `${timeline.scrollHeight}px`
  cursor.style.left = `${pxToEm(layerWidth)}em`
  cursor.style.width = '0.1em'
}

const searchSound = async function (text) {
  const res = await fetch('/sound-editor/search', {
    method: 'POST',
    body: JSON.stringify({ textSearch: text }),
    headers: { 'Content-Type': 'application/json' }
  })

  const result = await res.json()

  if (result.soundResults === undefined) {
    msg.innerHTML = 'Error: A problem occured searching sounds'
  }
  
  displaySounds(result.soundResults)
}

let dragged
const displaySounds = function (soundResults) {
  for (const child of soundList.querySelectorAll('div.sound-sample')) {
    child.remove()
  }
  for (const sound of soundResults.results) {
    const element = Schematic.soundSample({
      id: sound.id,
      name: sound.name
    })
    soundList.appendChild(element)

    element.addEventListener('dragstart', (e) => {
      dragged = element
    })
  }
}

document.addEventListener('layerAdd', async (e) => {
  document.dispatchEvent(new Event('timelineStop'))
  const res = await fetch('/sound-editor/layer/add', {
    method: 'POST',
  })

  const result = await res.json()

  const layer = result.addedLayer

  document.getElementById('layers').appendChild(Schematic.layer(layer))
  resetCursor()
})

/*
  Wrap playback code in brackets to limit access
  to the *cringe* global variables
*/
{

  /** Retrives a list of sound samples given the current time (in milliseconds) */
  const getSamplesToPlay = function (time, samples) {
    console.assert(samples !== undefined, 'Cannot search an undefined array')
    if (samples === undefined) {
      console.error('Cannot search an undefined array')
      return null
    }
    return samples.filter((e) => e.startTime <= time && (e.startTime + e.duration) >= time)
  }

  let timer
  let audioList = []
  document.addEventListener('timelinePlay', async (e) => {
    resetCursor()

    // Prevent user spam by returning
    //
    // Later, this will be where the pause functionality lies
    if (timer) {
      return
    }
    
    // Retrieve timeline sample data
    const res = await fetch('/sound-editor/timeline/retrieveSoundData', {
      method: 'POST',
    })
    const result = await res.json()

    const cursor = document.getElementById('tl-cursor')
    const playedSamples = new Set()
    const step = 10
    // Current time in ms
    let currentTime = 0
    timer = setInterval(async function () {
      const samples = getSamplesToPlay(currentTime, result.soundData.sampleInfo)
      if (samples === null) {
        return
      }
      for (const sample of samples) {

        // Sample is already playing
        if (playedSamples.has(sample)) {
          continue
        }
        const soundUrl = result.soundData.sounds[sample.soundId]
        
        playedSamples.add(sample)
        const audio = new Audio(soundUrl)
        audioList.push(audio)
        await audio.play()
      }
      // Convert ms into seconds
      const newCursorWidth = ((currentTime += step) / 1000)
      cursor.style.width = `${newCursorWidth}em`
    }, step)
  })

  document.addEventListener('timelineStop', (e) => {
    if (!timer) {
      return
    }
    clearInterval(timer)
    timer = null

    for (const audio of audioList) {
      audio.pause()
    }
    audioList = []
    resetCursor()
  })
}

document.getElementById('tl-play').addEventListener('click', (e) => document.dispatchEvent(new Event('timelinePlay')))
document.getElementById('tl-stop').addEventListener('click', (e) => document.dispatchEvent(new Event('timelineStop')))
document.getElementById('tl-add-layer').addEventListener('click', (e) => document.dispatchEvent(new Event('layerAdd')))

{
  let isLoaded = false
  window.addEventListener('load', async (e) => {
    const res = await fetch('/sound-editor/load/<%= projectId %>', {
      method: 'POST'
    })

    const result = await res.json()
    for (const layer of result.layers) {
      const layerSchem = Schematic.layer(layer)

      for (const sample of layer.samples) {
        const node = Schematic.soundSample({
          id: sample.soundId,
          name: result.soundInfo[sample.soundId]
        })
        node.style.width = `${sample.duration}em`
        node.style.borderColor = layerSchem.querySelector('div.tl-layer').style.backgroundColor
        layerSchem.appendChild(node)
      }
      document.getElementById('layers').appendChild(layerSchem)
    }
    document.getElementById('project-title').innerHTML = result.title
    resetCursor()
    isLoaded = true
  })

  // Runs anytime the user reloads or leaves the document
  document.addEventListener('visibilitychange', async (e) => {
    // Ensure data is loaded before overwritting saved data
    if (!isLoaded) {
      return
    }
    const res = await fetch('/sound-editor/save', {
      method: 'POST',
    })

    const result = await res.json()
    if (!result.success) {
      console.error('A problem occured while saving the project. Please report the issue at https://github.com/it-sd/sqc-project-Lucidus115/issues')
    }
  })
}

search.addEventListener('submit', (e) => {
  e.preventDefault()
  const text = search.querySelector('input').value
  searchSound(text)
}, false)
  </script>
<%- include('shared/footer'); -%>
